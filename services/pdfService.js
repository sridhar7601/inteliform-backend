// pdfService.js - PDF Generation Service
const fs = require('fs').promises;
const path = require('path');
const PDFDocument = require('pdfkit');

/**
 * Ensure the downloads directory exists
 */
const ensureDownloadsDir = async () => {
  const downloadsDir = path.join(__dirname, '..', 'downloads');
  try {
    await fs.access(downloadsDir);
  } catch {
    await fs.mkdir(downloadsDir, { recursive: true });
    console.log('üìÅ Created downloads directory');
  }
  return downloadsDir;
};

/**
 * Generate a verified PDF from form data
 * @param {Object} formData - The collected form data
 * @param {Object} verifiedFormStructure - The form structure from the database
 * @param {string} outputPath - Path to save the PDF
 * @returns {Promise<string>} - Path to the generated PDF
 */
const generateVerifiedPDF = (formData, verifiedFormStructure, outputPath) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50, size: 'A4' });
      const stream = require('fs').createWriteStream(outputPath);
      doc.pipe(stream);

      // Header with verified information
      doc.fontSize(18).font('Helvetica-Bold')
         .text('GOVERNMENT OF INDIA', { align: 'center' });
      
      doc.fontSize(14).font('Helvetica-Bold')
         .text(verifiedFormStructure.authority.toUpperCase(), { align: 'center' });
      
      doc.fontSize(12).font('Helvetica-Bold')
         .text(verifiedFormStructure.name.toUpperCase(), { align: 'center' });
      
      doc.fontSize(10).font('Helvetica')
         .text(`Form No. ${verifiedFormStructure.form_number}`, { align: 'center' })
         .text(`‚úÖ Verified with LangChain on: ${verifiedFormStructure.last_verified}`, { align: 'center' });
      
      doc.moveDown(2);

      // Form fields
      let yPosition = doc.y + 20;
      const leftMargin = 70;
      const rightMargin = 300;
      
      verifiedFormStructure.verified_fields.forEach((field) => {
        if (yPosition > 650) {
          doc.addPage();
          yPosition = 80;
        }

        const value = formData[field.name] || 'Not Provided';
        
        doc.fontSize(11).font('Helvetica-Bold')
           .text(`${field.question}`, leftMargin, yPosition, { width: 200 });
        
        doc.fontSize(11).font('Helvetica')
           .text(String(value), rightMargin, yPosition, { width: 250 });
           
        yPosition += 30;
      });

      // Documents and processing info
      yPosition += 20;
      doc.fontSize(12).font('Helvetica-Bold')
         .text('‚úÖ VERIFIED REQUIRED DOCUMENTS:', leftMargin, yPosition);
      
      yPosition += 25;
      verifiedFormStructure.verified_documents.forEach((doc_name, index) => {
        doc.fontSize(10).font('Helvetica')
           .text(`${index + 1}. ${doc_name}`, leftMargin, yPosition);
        yPosition += 18;
      });

      yPosition += 30;
      doc.fontSize(10).font('Helvetica-Bold')
         .text(`Processing Fee: ${verifiedFormStructure.verified_fees}`, leftMargin, yPosition);
      yPosition += 15;
      doc.text(`Processing Time: ${verifiedFormStructure.verified_processing_time}`, leftMargin, yPosition);
      yPosition += 15;
      doc.text(`Official Website: ${verifiedFormStructure.official_website}`, leftMargin, yPosition);

      // Footer
      yPosition += 40;
      doc.fontSize(8).font('Helvetica')
         .fillColor('#666666')
         .text(`Generated by IntelliForm AI LangChain V4.0 on ${new Date().toLocaleString('en-IN')}`, { align: 'center' })
         .text('ü¶ú Powered by LangChain ‚Ä¢ ‚úÖ Verified Government Data', { align: 'center' });

      doc.end();
      stream.on('finish', () => resolve(outputPath));
      stream.on('error', reject);
      
    } catch (error) {
      reject(error);
    }
  });
};

module.exports = {
  ensureDownloadsDir,
  generateVerifiedPDF
};
